import 'package:dio/dio.dart';
import 'dio_client.dart';

class AuthService {
  final DioClient _dioClient = DioClient();

  /// ƒêƒÉng nh·∫≠p -> l·∫•y token (c√≥ retry)
  Future<String> login(String username, String password) async {
    int retryCount = 0;
    const int maxRetry = 3;

    while (retryCount < maxRetry) {
      try {
        final response = await _dioClient.dio.post(
          '/auth/login',
          data: {
            "username": username,
            "password": password,
          },
          options: Options(headers: {"Content-Type": "application/json"}),
        );

        final token = response.data['token'];
        if (token != null) {
          _dioClient.setToken(token);
          print('‚úÖ Token l∆∞u: $token');
          return token;
        } else {
          throw Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ server');
        }
      } on DioException catch (e) {
        final message = _handleError(e);
        print('‚ö†Ô∏è L·ªói ƒëƒÉng nh·∫≠p: $message');

        // üëâ Retry khi l√† l·ªói m·∫°ng ho·∫∑c timeout
        if (e.type == DioExceptionType.connectionError ||
            e.type == DioExceptionType.connectionTimeout ||
            e.type == DioExceptionType.receiveTimeout) {
          retryCount++;
          print('üîÅ Th·ª≠ l·∫°i l·∫ßn $retryCount/$maxRetry sau 2s...');
          await Future.delayed(const Duration(seconds: 2));
          continue; // th·ª≠ l·∫°i
        } else {
          throw Exception(message); // d·ª´ng khi l·ªói kh√¥ng retry ƒë∆∞·ª£c
        }
      } catch (e) {
        throw Exception('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: $e');
      }
    }

    throw Exception('üö´ ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau $maxRetry l·∫ßn th·ª≠.');
  }

  /// L·∫•y danh s√°ch s·∫£n ph·∫©m (c√≥ retry)
  Future<List<dynamic>> getProducts() async {
    int retryCount = 0;
    const int maxRetry = 3;

    while (retryCount < maxRetry) {
      try {
        final response = await _dioClient.dio.get('/products');
        return response.data;
      } on DioException catch (e) {
        final message = _handleError(e);
        print('‚ö†Ô∏è L·ªói t·∫£i s·∫£n ph·∫©m: $message');

        if (e.type == DioExceptionType.connectionError ||
            e.type == DioExceptionType.connectionTimeout ||
            e.type == DioExceptionType.receiveTimeout) {
          retryCount++;
          print('üîÅ Th·ª≠ l·∫°i l·∫ßn $retryCount/$maxRetry sau 2s...');
          await Future.delayed(const Duration(seconds: 2));
          continue;
        } else {
          throw Exception(message);
        }
      }
    }

    throw Exception('üö´ L·∫•y s·∫£n ph·∫©m th·∫•t b·∫°i sau $maxRetry l·∫ßn th·ª≠.');
  }

  /// X·ª≠ l√Ω l·ªói tr·∫£ v·ªÅ
  String _handleError(DioException e) {
    switch (e.type) {
      case DioExceptionType.connectionTimeout:
        return 'K·∫øt n·ªëi qu√° th·ªùi gian.';
      case DioExceptionType.sendTimeout:
        return 'G·ª≠i d·ªØ li·ªáu qu√° th·ªùi gian.';
      case DioExceptionType.receiveTimeout:
        return 'Nh·∫≠n d·ªØ li·ªáu qu√° th·ªùi gian.';
      case DioExceptionType.badResponse:
        if (e.response?.statusCode == 401) {
          return 'Sai username ho·∫∑c password.';
        }
        return 'L·ªói server: ${e.response?.statusCode}';
      case DioExceptionType.connectionError:
        return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server.';
      default:
        return 'L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.message}';
    }
  }
}
